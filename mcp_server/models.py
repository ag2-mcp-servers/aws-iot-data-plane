# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-28T12:02:51+00:00

from __future__ import annotations

from enum import Enum
from typing import Any, List, Optional

from pydantic import BaseModel, Field, RootModel, conint, constr


class ConflictException(RootModel[Any]):
    root: Any


class ContentType(RootModel[str]):
    root: str


class CorrelationData(RootModel[str]):
    root: str


class DeleteThingShadowRequest(BaseModel):
    pass


class GetRetainedMessageRequest(BaseModel):
    pass


class GetThingShadowRequest(BaseModel):
    pass


class InternalFailureException(RootModel[Any]):
    root: Any


class InvalidRequestException(RootModel[Any]):
    root: Any


class JsonDocument(RootModel[str]):
    root: str


class ListNamedShadowsForThingRequest(BaseModel):
    pass


class ListRetainedMessagesRequest(BaseModel):
    pass


class MaxResults(RootModel[conint(ge=1, le=200)]):
    root: conint(ge=1, le=200)


class MessageExpiry(RootModel[int]):
    root: int


class MethodNotAllowedException(RootModel[Any]):
    root: Any


class NextToken(RootModel[str]):
    root: str


class PageSize(RootModel[conint(ge=1, le=100)]):
    root: conint(ge=1, le=100)


class Payload(RootModel[str]):
    root: str


class PayloadFormatIndicator(Enum):
    UNSPECIFIED_BYTES = 'UNSPECIFIED_BYTES'
    UTF8_DATA = 'UTF8_DATA'


class PayloadSize(RootModel[int]):
    root: int


class PublishRequest(BaseModel):
    payload: Optional[Payload] = None


class Qos(RootModel[conint(ge=0, le=1)]):
    root: conint(ge=0, le=1)


class RequestEntityTooLargeException(RootModel[Any]):
    root: Any


class ResourceNotFoundException(RootModel[Any]):
    root: Any


class ResponseTopic(RootModel[str]):
    root: str


class Retain(RootModel[bool]):
    root: bool


class ServiceUnavailableException(RootModel[Any]):
    root: Any


class ShadowName(
    RootModel[constr(pattern=r'[a-zA-Z0-9:_-]+', min_length=1, max_length=64)]
):
    root: constr(pattern=r'[a-zA-Z0-9:_-]+', min_length=1, max_length=64)


class ThingName(
    RootModel[constr(pattern=r'[a-zA-Z0-9:_-]+', min_length=1, max_length=128)]
):
    root: constr(pattern=r'[a-zA-Z0-9:_-]+', min_length=1, max_length=128)


class ThrottlingException(RootModel[Any]):
    root: Any


class Timestamp(RootModel[int]):
    root: int


class Topic(RootModel[str]):
    root: str


class UnauthorizedException(RootModel[Any]):
    root: Any


class UnsupportedDocumentEncodingException(RootModel[Any]):
    root: Any


class UpdateThingShadowRequest(BaseModel):
    payload: JsonDocument


class UpdateThingShadowResponse(BaseModel):
    payload: Optional[JsonDocument] = None


class UserProperties(RootModel[str]):
    root: str


class UserPropertiesBlob(RootModel[str]):
    root: str


class ThingsThingNameShadowPostRequest(BaseModel):
    payload: str = Field(..., description='The state information, in JSON format.')


class TopicsTopicPostRequest(BaseModel):
    payload: Optional[str] = Field(
        None,
        description='<p>The message body. MQTT accepts text, binary, and empty (null) message payloads.</p> <p>Publishing an empty (null) payload with <b>retain</b> = <code>true</code> deletes the retained message identified by <b>topic</b> from Amazon Web Services IoT Core.</p>',
    )


class XAmzMqtt5PayloadFormatIndicator(Enum):
    UNSPECIFIED_BYTES = 'UNSPECIFIED_BYTES'
    UTF8_DATA = 'UTF8_DATA'


class DeleteThingShadowResponse(BaseModel):
    payload: JsonDocument


class GetRetainedMessageResponse(BaseModel):
    lastModifiedTime: Optional[Timestamp] = None
    payload: Optional[Payload] = None
    qos: Optional[Qos] = None
    topic: Optional[Topic] = None
    userProperties: Optional[UserPropertiesBlob] = None


class GetThingShadowResponse(BaseModel):
    payload: Optional[JsonDocument] = None


class NamedShadowList(RootModel[List[ShadowName]]):
    root: List[ShadowName]


class RetainedMessageSummary(BaseModel):
    lastModifiedTime: Optional[Timestamp] = None
    payloadSize: Optional[PayloadSize] = None
    qos: Optional[Qos] = None
    topic: Optional[Topic] = None


class ListNamedShadowsForThingResponse(BaseModel):
    nextToken: Optional[NextToken] = None
    results: Optional[NamedShadowList] = None
    timestamp: Optional[Timestamp] = None


class RetainedMessageList(RootModel[List[RetainedMessageSummary]]):
    root: List[RetainedMessageSummary]


class ListRetainedMessagesResponse(BaseModel):
    nextToken: Optional[NextToken] = None
    retainedTopics: Optional[RetainedMessageList] = None
